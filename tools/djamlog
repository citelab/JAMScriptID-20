#!/bin/bash

IDIR="${BASH_SOURCE%/*}"
if [[ ! -d "$IDIR" ]]; then IDIR="$PWD"; fi
source "$IDIR/inc/misc_tools.sh"

die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF
Extracts the logs written by the C nodes and displays them in the terminal.

Usage: djamlog [--program=pgm --app=app_name]

djamlog
Extracts the logs from the last program that was run or is running.

djamlog --program=stringlog --app=q5
Extracts the logs from the execution of stringlog under the application ID q5
if logs from such a run exists.

This is the docker version of jamlog.

EOF
}


checkdocker() {

    if [ -e $1/dockerId ]; then
        local didp=`cat $1/dockerId`
        local present=`docker ps --filter id=$didp | grep $didp | wc -l | tr -d '[:space:]'`
        if [ $present == "1" ]; then
            running="docker"
        else
            running="none"
        fi
    fi
}


###
# Main script execution begins here...
#

jamfolder=$HOME"/__jamruns"
exit_missingdir $jamfolder "__jamruns folder missing. JAMScript tools not setup?"

appsfolder=$jamfolder/apps
exit_missingdir $appsfolder "__jamruns/apps folder missing. JAMScript tools not setup?"

cd $appsfolder

j=

while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--app" requires a non-empty option argument.'
            ;;

        -p|--program)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                program=$2
                shift
            else
                die 'ERROR: "--program" requires a non-empty option argument.'
            fi
            ;;
        --program=?*)
            program=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --program=)            # Handle the case of an empty
            die 'ERROR: "--program" requires a non-empty option argument.'
            ;;
        -j|--j)
            j=1
            ;;
            *)               # Default case: No more options, so break out of the loop.
        break
    esac
    shift
done


if [ -z $app ] && [ -z $program ]; then
    # no args specified.. get it from previous runs
    lprogram=`cat $appsfolder/program`
    lapp=`cat $appsfolder/app`
else
    lprogram=$program
    lapp=$app
fi

if [ -e $appsfolder/$lprogram"_"$lapp ]; then
    cd $appsfolder

    for jruns in `ls $appsfolder/$lprogram"_"$lapp`; do
        dir=$appsfolder/$lprogram"_"$lapp/$jruns
        if [ -d $dir ]; then
            checkdocker $dir
            echo "Running " $running

            if [ $running == "docker" ]; then
                runon=`cat $dir/dockerId`
                if [ -z $app ] && [ -z $program ]; then
                    if [ -z $j ]; then
                        docker exec -it $runon jamlog
                    else
                        docker exec -it $runon jamlog --j
                    fi
                else
                    if [ -z $j ]; then
                        docker exec -it $runon jamlog --program=$program --app=$app
                    else
                        docker exec -it $runon jamlog --program=$program --app=$app --j
                    fi
                fi
            fi
        fi

    done
fi


#    for jruns in */; do
#        if [ -d $jruns ] && [ -e $jruns/dockerId ]; then
#            dockerId=`cat $jruns/dockerId`
#            docker exec -it $dockerId jamlog --program=$program --app=$app
#        fi
#    done
