#!/bin/bash

IDIR="${BASH_SOURCE%/*}"
if [[ ! -d "$IDIR" ]]; then IDIR="$PWD"; fi
#source "$IDIR/inc/pumba_tools.sh"
source "$IDIR/inc/mach_tools.sh"
source "$IDIR/inc/misc_tools.sh"
source "$IDIR/inc/docker_tools.sh"



show_usage() {
    cat << EOF
Runs the JAMScript executable (.jxe) in a Docker container.

djamrun program.jxe
Runs J and C node, one each, of a device with program.jxe
under the application name 'app-N'. To run under a different
app name X, use the --app=X option.

djamrun program.jxe --fog
Runs a fog node (only J node) with program.jxe. Similarly, the --cloud
flag runs a cloud node.

By default, jamrun uses a Redis server running at 127.0.0.1:6379 as the
data store. The Redis server needs to be started before launching the
application. To use a different Redis server use the --data option.

djamrun program.jxe --data=127.0.0.1:7000
Runs program.jxe and connects it to an already running Redis server at
port 7000 of the local host. Redis server can run outside the
local host (Redis needs to the configured to accept outside
connections).

To start more than one C node at a device use the following command.
djamrun program.jxe --num=4

To provide a set of tags to the program, use the following command.
djamrun program.jxe --tags="param1, param2"

Use the --bg option to run a command in the backgroud.

Usage: djamrun file.jxe [--app=appl_name] [--fog|--cloud] [--num=num_c_devs]
                                    [--data=data-url]
                                    [--tags=quoted_list_of_tags]
                                    [--bg]
                                    [--runon=container_to_run]
                                    [--log]
                                    [--loc]
                                    [--link=random|near|best]
                                    [--publish=dport:hport]


The djamrun command creates a run state in the $HOME/__jamrun folder.
EOF
}



# runatcloud $dockid $file $jappid $data $tags
runatcloud() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local tags=$5


    argstr=" --app=$appid --data=$data --num=$num --tmux=$dockid-c --tags=$tags --link=$link --loc=$loc "
    if [ ! -z $log ]; then
        argstr="$argstr --log"
    fi

    buildjargs $argstr

    if [ -z $bg ]; then
        echo "-" > $thisappfolder/$dockid/tmuxid
        docker exec -it --env NODE_PATH=/usr/local/lib/node_modules:/node_modules $dockerSer jamrun $file $results
    else
        echo $dockid > $thisappfolder/$dockid/tmuxid
        tmux new-session -s $dockid"-j" -d docker exec -it  --env NODE_PATH=/usr/local/lib/node_modules:/node_modules $dockerSer jamrun $file $results
    fi

}

# runatfog $dockid $file $jappid $data $tags
runatfog() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local tags=$5

    argstr=" --app=$appid --data=$data --num=$num --tmux=$dockid-c --tags=$tags --link=$link --loc=$loc "
    if [ ! -z $log ]; then
        argstr="$argstr --log"
    fi

    buildjargs $argstr

    if [ -z $bg ]; then
        echo "-" > $thisappfolder/$dockid/tmuxid
        docker exec -it --env NODE_PATH=/usr/local/lib/node_modules:/node_modules $dockerSer jamrun $file $results
    else
        echo $dockid > $thisappfolder/$dockid/tmuxid
        tmux new-session -s $dockid"-j" -d docker exec -it  --env NODE_PATH=/usr/local/lib/node_modules:/node_modules $dockerSer jamrun $file $results
    fi

}

# runatdevice $dockid $file $jappid $data $num $tags
runatdevice() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local num=$5
    local tags=$6

    echo $num > $thisappfolder/$dockid/cdevs
    echo "$dockid-c" > $thisappfolder/$dockid/tmuxid_c

    # save for short cut use
    echo "$dockid-c" > $appfolder/tmuxid

    argstr=" --app=$appid --data=$data --num=$num --tmux=$dockid-c --tags=$tags --link=$link --loc=$loc "
    if [ ! -z $log ]; then
        argstr="$argstr --log"
    fi

    buildjargs $argstr
    if [ -z $bg ]; then
        echo "-" > $thisappfolder/$dockid/tmuxid
        docker exec -it --env NODE_PATH=/usr/local/lib/node_modules:/node_modules $dockerSer jamrun $file $results
    else
        echo $dockid"-j" > $thisappfolder/$dockid/tmuxid
        tmux new-session -s $dockid"-j" -d docker exec -it  --env NODE_PATH=/usr/local/lib/node_modules:/node_modules $dockerSer jamrun $file $results
    fi
    echo ">>> Device started in container $dockid"
}


dojamrun() {
    local type=$1
    local dockid=$2
    local file=$3
    local num=$4

    save $type $thisappfolder/$dockid/machType
    save $data $thisappfolder/$dockid/dataStore
    save $dockerSer $thisappfolder/$dockid/dockerId
    save "docker" $thisappfolder/$dockid/class

    case $type in
        cloud)
            runatcloud $dockid $file $jappid $data $tags
            ;;
        fog)
            runatfog $dockid $file $jappid $data $tags
            ;;
        device)
            runatdevice $dockid $file $jappid $data $num $tags
            ;;
    esac
}


# we generate a new app-XX only if the
# input is app-n, otherwise the jappid (output) is
# the input argument ($1)
getappid() {
    local appid=$1
    local docki=$2

    inc_counter $jamfolder/counter
    count=$result

    if [ $appid == "app-n" ]; then
        save_no_overwrite "app-"$count $thisappfolder/$docki/appid
    else
        save $appid $thisappfolder/$docki/appid
    fi

    jappid=`cat $thisappfolder/$docki/appid`

    # save for short cut use
    save "$jappid" $appfolder/appid
}


getdockerid() {
    local rundock=$1

    inc_counter $jamfolder/counter
    local count=$result
    dockerid="u-"$UID"-${type:0:3}-"$count

    if [ -z $rundock ] || [ `docker ps --filter id=$rundock | grep $rundock | wc -l | tr -d '[:space:]'` == "0" ]; then
        result="new"
    else
        dockerSer=$rundock
        result="old"
    fi

}


make_container() {
    local type=$1
    local contname=$2

    create_missingdir $jamfolder/$type
    create_missingdir $jamfolder/$type/$contname

    if [ $type == "cloud" ]; then
        startglobalmach $contname jamnet `cat $jamfolder/network` $dport $hport
#        restartcloudpumba $contname
    else
        exit_missingfile $jamfolder/zones/count
        local zcount=`cat $jamfolder/zones/count`
        if [ -z $zcount ]; then
            die "Zone count is undefined.. run djaminit again."
        fi
        local zone=$(( 1 + $RANDOM % $zcount ))

        startzonemach $zone $contname jamnet `cat $jamfolder/network` $dport $hport
#        if [ $type == "fog" ]; then
#            restartfogpumba $contname
#        fi
    fi

    save $result $jamfolder/$type/$contname/dockerId
    save "1" $jamfolder/$type/$contname/refCount
}

reuse_container() {
    local type=$1
    local contname=$2

    create_missingdir $jamfolder/$type
    create_missingdir $jamfolder/$type/$contname

    inc_counter $jamfolder/$type/$contname/refCount
}

createzonerouters() {
    exit_missingfile $jamfolder/zones/count

    local zcount=`cat $jamfolder/zones/count`

    for i in `seq 1 $zcount`; do
        startzonerouter $i "u-$UID-router-$i" jamnet `cat $jamfolder/network`
#        restartrouterpumba "u-$UID-router-$i"
    done
}


killdocker() {
    local dock_id=$1

    if [ -e $jamfolder/$type/$dock_id ]; then
        dec_counter $jamfolder/$type/$dock_id/refCount
        if [ $result == 0 ]; then
            docker kill `cat $jamfolder/$type/$dock_id/dockerId`
            docker rm $dock_id
        fi
    fi
}


removetmux() {
    local tmid=$1

    tmux has-session -t $tmid 2>/dev/null
    local res=$?
    if [ $res == "0" ]; then
        tmux kill-session -t $tmid
    fi
}

removedockermach() {

    local tmid=`cat $thisappfolder/$dockerid/tmuxid`
    removetmux $tmid

    if [ -e $thisappfolder/$dockerid/cdevs ]; then
        local num=`cat $thisappfolder/$dockerid/cdevs`
        for i in `seq 1 $num`; do
            removetmux $tmid"-"$i
        done
    fi

    killdocker $dockerid

}


processjxe() {
    result="ok"
}


getportinfo() {
    local pinfo=$1

    dport="${pinfo%:*}"
    hport="${pinfo##*:}"
}



# Initialize all the option variables.
app=app-n
type=device
data=docker:6379
tags=
num=1
bg=
log=
runon=
link=
loc=
dport=
hport=
mount=

file=$1
shift
fext="${file##*.}"

if [ -z $file ] || [ $file = "-h" ] || [ $file = "--help" ]; then
    show_usage
    exit 1
fi

if [ "$fext" != "jxe" ]; then
    die "Extension on $file is not .jxe"
fi


while :; do
    case $1 in
        --help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        --app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--app" requires a non-empty option argument.'
            ;;
        --runon)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                runon=$2
                shift
            else
                die 'ERROR: "--runon" requires a non-empty option argument.'
            fi
            ;;
        --runon=?*)
            runon=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --runon=)            # Handle the case of an empty
            die 'ERROR: "--runon" requires a non-empty option argument.'
            ;;
        --tags)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                tags=$2
                shift
            else
                die 'ERROR: "--tags" requires a non-empty option argument.'
            fi
            ;;
        --tags=?*)
            tags=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --tags=)            # Handle the case of an empty
            die 'ERROR: "--tags" requires a non-empty option argument.'
            ;;
        --num)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                num=$2
                shift
            else
                die 'ERROR: "--num" requires a non-empty option argument.'
            fi
            ;;
        --num=?*)
            num=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --num=)            # Handle the case of an empty
            die 'ERROR: "--num" requires a non-empty option argument.'
            ;;
        --data)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                data=$2
                shift
            else
                die 'ERROR: "--data" requires a non-empty option argument.'
            fi
            ;;
        --data=?*)
            data=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --data=)            # Handle the case of an empty
            die 'ERROR: "--data" requires a non-empty option argument.'
            ;;
        --loc)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                loc=$2
                shift
            else
                die 'ERROR: "--loc" requires longitude and lattitude specification'
            fi
            ;;
        --loc=?*)
            loc=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --loc=)            # Handle the case of an empty
            die 'ERROR: "--loc" requires longitude and lattitude specification'
            ;;
        --link)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                link=$2
                shift
            else
                die 'ERROR: "--link" requires a non-empty option argument.'
            fi
            ;;
        --link=?*)
            link=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --link=)            # Handle the case of an empty
            die 'ERROR: "--link" requires a non-empty option argument.'
            ;;
        --publish)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                getportinfo $2
                shift
            else
                die 'ERROR: "--publish" requires docker and port information'
            fi
            ;;
        --publish=?*)
            publish=${1#*=}     # Delete everything up to "=" and assign the remainder.
            getlonglat $publish
            ;;
        --publish=)            # Handle the case of an empty
            die 'ERROR: "--publish" requires docker and port information'
            ;;
        --fog)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="fog"
                num=
            fi
            ;;
        --cloud)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="cloud"
                num=
            fi
            ;;
        --bg)
            bg=1
            ;;
        --log)
            log=1
            ;;
        --mount)
            mount=1
            ;;
        --)              # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# Check necessary parameters and set defaults

if [ "$type" != "device" ] && [ -n "$num" ]; then
    die "number of devices can't be speciied for fog/cloud"
fi

if [ ! -z $mount ]; then
    if [ -z ${JAMDATA} ]; then
        echo "JAMDATA is not set. Set JAMDATA to the directory containing the datasets"
        exit 1
    fi
fi

# If docker is not installed, we fail here
check_prog docker "Docker not installed. Exiting."
#check_prog pumba "Pumba not installed. Download it from https://github.com/gaia-adm/pumba/releases"
check_prog tmux "tmux not installed. Exiting."

# Check whether the global __jamruns folder is there
jamfolder=$HOME"/__jamruns"
exit_missingdir $jamfolder "__jamdir directory not found. Run djam pull first. "
exit_missingdir $jamfolder/zones "zones not setup. Run djam init first"
exit_missingfile $jamfolder/dockerImage "DockerImage not setup. Run djam pull first."

#pumbastatus=`cat $jamfolder/pumba/status`

appfolder=$jamfolder/apps
create_missingdir $appfolder

if [ -e "$file" ]; then

    # Get the folder
    filenoext="${file%.*}"
    thisappfolder=$appfolder"/"$filenoext"_"$app
    create_missingdir $thisappfolder

    # save for short cut use
    save "$filenoext" $appfolder/program
    save "$app" $appfolder/app

    # process the .jxe file
    file=`pwd`/$file
    processjxe $file
    if [ $result != "ok" ]; then
        die "Problem with JAMScript executable"
    fi


    dockerImage=`cat $jamfolder/dockerImage`
    createzonerouters
    createnetwork jamnet 10 $jamfolder
    # cd into the $thisappfolder
    cd $thisappfolder

    getdockerid $runon
    docktype=$result

    create_missingdir $thisappfolder/$dockerid
    getappid $app $dockerid

    if [ $docktype == "new" ]; then
        # We are also putting resources such as redis on the container
        make_container $type $dockerid
    else
        # Automatically inherit the redis.. no checking??
        reuse_container $type $dockerid
    fi

    docker cp $file $dockerSer:/home/admin/temp/`basename $file`
    dojamrun $type $dockerid `basename $file` $num
    if [ -z $bg ] && [ $docktype == "new" ]; then
        removedockermach
    fi
else
    die "File: $file not found"
fi
